use serde::{Serialize, Deserialize};
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct Node {
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub neighbor_nodes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "3")]
    pub is_alive: bool,
    #[prost(string, tag = "4")]
    pub rpc_domain: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub rpc_port: u32,
    #[prost(string, tag = "6")]
    pub ws_domain: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub ws_port: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct NodesOverviewResponse {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<Node>,
    #[prost(uint32, tag = "2")]
    pub total_node_count: u32,
    #[prost(uint32, tag = "3")]
    pub total_message_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct NodeId {
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct MessageInfo {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub to_addr: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct NodeDetailResponse {
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub is_alive: bool,
    #[prost(map = "string, int32", tag = "3")]
    pub clock: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(message, repeated, tag = "4")]
    pub message_list: ::prost::alloc::vec::Vec<MessageInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct MessageId {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message,Serialize, Deserialize)]
pub struct MessageDetailResponse {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub from_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub to_addr: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub clock_json_str_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "ZType", tag = "6")]
    pub message_type: i32,
    #[prost(bytes = "vec", tag = "7")]
    pub message_data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "8")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,Serialize, Deserialize)]
#[repr(i32)]
pub enum ZType {
    Rng = 0,
    Event = 1,
    Clock = 2,
    Gateway = 3,
    Zchat = 4,
}
impl ZType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ZType::Rng => "Z_TYPE_RNG",
            ZType::Event => "Z_TYPE_EVENT",
            ZType::Clock => "Z_TYPE_CLOCK",
            ZType::Gateway => "Z_TYPE_GATEWAY",
            ZType::Zchat => "Z_TYPE_ZCHAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Z_TYPE_RNG" => Some(Self::Rng),
            "Z_TYPE_EVENT" => Some(Self::Event),
            "Z_TYPE_CLOCK" => Some(Self::Clock),
            "Z_TYPE_GATEWAY" => Some(Self::Gateway),
            "Z_TYPE_ZCHAT" => Some(Self::Zchat),
            _ => None,
        }
    }
}
